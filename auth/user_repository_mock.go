// Code generated by MockGen. DO NOT EDIT.
// Source: auth/user_repository.go

// Package auth is a generated GoMock package.
package auth

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockuserRepositoryInterface is a mock of userRepositoryInterface interface
type MockuserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepositoryInterfaceMockRecorder
}

// MockuserRepositoryInterfaceMockRecorder is the mock recorder for MockuserRepositoryInterface
type MockuserRepositoryInterfaceMockRecorder struct {
	mock *MockuserRepositoryInterface
}

// NewMockuserRepositoryInterface creates a new mock instance
func NewMockuserRepositoryInterface(ctrl *gomock.Controller) *MockuserRepositoryInterface {
	mock := &MockuserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockuserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockuserRepositoryInterface) EXPECT() *MockuserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// createNewUser mocks base method
func (m *MockuserRepositoryInterface) createNewUser(user userRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createNewUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// createNewUser indicates an expected call of createNewUser
func (mr *MockuserRepositoryInterfaceMockRecorder) createNewUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createNewUser", reflect.TypeOf((*MockuserRepositoryInterface)(nil).createNewUser), user)
}

// verifyUser mocks base method
func (m *MockuserRepositoryInterface) verifyUser(recipient, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "verifyUser", recipient, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// verifyUser indicates an expected call of verifyUser
func (mr *MockuserRepositoryInterfaceMockRecorder) verifyUser(recipient, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "verifyUser", reflect.TypeOf((*MockuserRepositoryInterface)(nil).verifyUser), recipient, token)
}

// loginUser mocks base method
func (m *MockuserRepositoryInterface) loginUser(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loginUser", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// loginUser indicates an expected call of loginUser
func (mr *MockuserRepositoryInterfaceMockRecorder) loginUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loginUser", reflect.TypeOf((*MockuserRepositoryInterface)(nil).loginUser), email, password)
}

// forgetPassword mocks base method
func (m *MockuserRepositoryInterface) forgetPassword(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "forgetPassword", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// forgetPassword indicates an expected call of forgetPassword
func (mr *MockuserRepositoryInterfaceMockRecorder) forgetPassword(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "forgetPassword", reflect.TypeOf((*MockuserRepositoryInterface)(nil).forgetPassword), email)
}

// getUserByEmail mocks base method
func (m *MockuserRepositoryInterface) getUserByEmail(email string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByEmail", email)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByEmail indicates an expected call of getUserByEmail
func (mr *MockuserRepositoryInterfaceMockRecorder) getUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByEmail", reflect.TypeOf((*MockuserRepositoryInterface)(nil).getUserByEmail), email)
}

// resetPassword mocks base method
func (m *MockuserRepositoryInterface) resetPassword(token, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "resetPassword", token, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// resetPassword indicates an expected call of resetPassword
func (mr *MockuserRepositoryInterfaceMockRecorder) resetPassword(token, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "resetPassword", reflect.TypeOf((*MockuserRepositoryInterface)(nil).resetPassword), token, password)
}

// getUserByResetPasswordToken mocks base method
func (m *MockuserRepositoryInterface) getUserByResetPasswordToken(token string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByResetPasswordToken", token)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByResetPasswordToken indicates an expected call of getUserByResetPasswordToken
func (mr *MockuserRepositoryInterfaceMockRecorder) getUserByResetPasswordToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByResetPasswordToken", reflect.TypeOf((*MockuserRepositoryInterface)(nil).getUserByResetPasswordToken), token)
}

// getUserById mocks base method
func (m *MockuserRepositoryInterface) getUserById(id int) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserById", id)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserById indicates an expected call of getUserById
func (mr *MockuserRepositoryInterfaceMockRecorder) getUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserById", reflect.TypeOf((*MockuserRepositoryInterface)(nil).getUserById), id)
}
