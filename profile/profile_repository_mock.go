// Code generated by MockGen. DO NOT EDIT.
// Source: profile/profile_repository.go

// Package profile is a generated GoMock package.
package profile

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	auth "userland/auth"
)

// MockprofileRepositoryInterface is a mock of profileRepositoryInterface interface
type MockprofileRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockprofileRepositoryInterfaceMockRecorder
}

// MockprofileRepositoryInterfaceMockRecorder is the mock recorder for MockprofileRepositoryInterface
type MockprofileRepositoryInterfaceMockRecorder struct {
	mock *MockprofileRepositoryInterface
}

// NewMockprofileRepositoryInterface creates a new mock instance
func NewMockprofileRepositoryInterface(ctrl *gomock.Controller) *MockprofileRepositoryInterface {
	mock := &MockprofileRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockprofileRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprofileRepositoryInterface) EXPECT() *MockprofileRepositoryInterfaceMockRecorder {
	return m.recorder
}

// updateUserProfile mocks base method
func (m *MockprofileRepositoryInterface) updateUserProfile(user *auth.User, newUserProfile UserProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateUserProfile", user, newUserProfile)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateUserProfile indicates an expected call of updateUserProfile
func (mr *MockprofileRepositoryInterfaceMockRecorder) updateUserProfile(user, newUserProfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateUserProfile", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).updateUserProfile), user, newUserProfile)
}

// changeUserEmail mocks base method
func (m *MockprofileRepositoryInterface) changeUserEmail(user *auth.User, newEmail string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "changeUserEmail", user, newEmail)
	ret0, _ := ret[0].(error)
	return ret0
}

// changeUserEmail indicates an expected call of changeUserEmail
func (mr *MockprofileRepositoryInterfaceMockRecorder) changeUserEmail(user, newEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "changeUserEmail", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).changeUserEmail), user, newEmail)
}

// changeUserPassword mocks base method
func (m *MockprofileRepositoryInterface) changeUserPassword(user *auth.User, oldPassword, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "changeUserPassword", user, oldPassword, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// changeUserPassword indicates an expected call of changeUserPassword
func (mr *MockprofileRepositoryInterfaceMockRecorder) changeUserPassword(user, oldPassword, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "changeUserPassword", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).changeUserPassword), user, oldPassword, newPassword)
}

// deleteUser mocks base method
func (m *MockprofileRepositoryInterface) deleteUser(user *auth.User, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteUser", user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteUser indicates an expected call of deleteUser
func (mr *MockprofileRepositoryInterfaceMockRecorder) deleteUser(user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteUser", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).deleteUser), user, password)
}

// updateUserPicture mocks base method
func (m *MockprofileRepositoryInterface) updateUserPicture(user *auth.User, picture []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateUserPicture", user, picture)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateUserPicture indicates an expected call of updateUserPicture
func (mr *MockprofileRepositoryInterfaceMockRecorder) updateUserPicture(user, picture interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateUserPicture", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).updateUserPicture), user, picture)
}

// deleteUserPicture mocks base method
func (m *MockprofileRepositoryInterface) deleteUserPicture(user *auth.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteUserPicture", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteUserPicture indicates an expected call of deleteUserPicture
func (mr *MockprofileRepositoryInterfaceMockRecorder) deleteUserPicture(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteUserPicture", reflect.TypeOf((*MockprofileRepositoryInterface)(nil).deleteUserPicture), user)
}
